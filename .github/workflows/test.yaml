# SPDX-FileCopyrightText: : 2021-2024 The PyPSA-Eur Authors
#
# SPDX-License-Identifier: CC0-1.0

name: Test workflows

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  schedule:
  - cron: "0 5 * * TUE"

# Cancel any in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    name: OS
    strategy:
      fail-fast: false
      matrix:
        os:
        - macos
        - windows
        - ubuntu
    runs-on: ${{ matrix.os }}-latest

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v4

    - name: Setup secrets
      run: |
        echo -ne "url: ${CDSAPI_URL}\nkey: ${CDSAPI_TOKEN}\n" > ~/.cdsapirc

    - name: Set cache dates
      run: |
        echo "week=$(date +'%Y%U')" >> $GITHUB_ENV # data and cutouts
        echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_ENV # env

    - uses: actions/cache@v4
      with:
        path: |
          data
          cutouts
        key: data-cutouts-${{ env.week }}

    - uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: pypsa-eur

    - name: Cache Conda env
      uses: actions/cache@v4
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}--${{ runner.arch }}--${{ env.today }}-${{ hashFiles('envs/environment.yaml') }}
      id: cache-env

    - name: Update environment
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: conda env update -n pypsa-eur -f envs/environment.yaml

    - name: Run snakemake test workflows
      id: test-result
      run: |
        make test
      continue-on-error: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v3.2.1-node20
      with:
        name: logs-${{ matrix.inhouse }}
        path: |
          logs
          .snakemake/log
        retention-days: 3

  run-tests-on-dev-deps:
    name: Inhouse
    strategy:
      fail-fast: false
      matrix:
        inhouse:
        - pypsa
        - atlite
        - powerplantmatching
        - linopy
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v4

    - name: Setup secrets
      run: |
        echo -ne "url: ${CDSAPI_URL}\nkey: ${CDSAPI_TOKEN}\n" > ~/.cdsapirc

    - name: Set cache dates
      run: |
        echo "week=$(date +'%Y%U')" >> $GITHUB_ENV # data and cutouts
        echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_ENV # env

    - uses: actions/cache@v4
      with:
        path: |
          data
          cutouts
        key: data-cutouts-${{ env.week }}

    - uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: pypsa-eur

    - name: Cache Conda env
      uses: actions/cache@v4
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}--${{ runner.arch }}--${{ env.today }}-${{ hashFiles('envs/environment.yaml') }}
      id: cache-env

    - name: Update environment
      if: steps.cache-env.outputs.cache-hit != 'true'
      run: conda env update -n pypsa-eur -f envs/environment.yaml

    - name: Install inhouse packages from master
      run: |
        python -m pip install uv
        uv pip install "${{ matrix.inhouse }}" --reinstall
        uv pip install git+https://github.com/PyPSA/${{ matrix.inhouse }}.git@master --reinstall

    - name: Run snakemake test workflows
      id: test-result
      run: |
        make test
      continue-on-error: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.inhouse }}
        path: |
          logs
          .snakemake/log
        retention-days: 3
